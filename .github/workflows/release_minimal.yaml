name: Release versioned binaries

permissions:
  contents: write

on:
  push:
    branches:
      - minimal
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  # build-rust:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         # Linux
  #         - os: ubuntu-24.04
  #           target: x86_64-unknown-linux-gnu
  #         - os: ubuntu-24.04-arm
  #           target: aarch64-unknown-linux-gnu

  #         # macOS
  #         - os: macos-13
  #           target: x86_64-apple-darwin
  #         - os: macos-26
  #           target: aarch64-apple-darwin

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Extract crate information
  #       shell: bash
  #       run: |
  #         echo "PROJECT_NAME=$(sed -n 's/^name = \"\(.*\)\"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.target }}

  #     - name: Build Rust
  #       run: cargo build --release --target ${{ matrix.target }}

  #     - name: Rename Rust artifact
  #       shell: bash
  #       run: |
  #         mv target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} \
  #            target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-rust-${{ matrix.target }}${{ matrix.extension }}

  #     - name: Upload Rust artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.PROJECT_NAME }}-${{matrix.os}}-${{ matrix.target }}-rust
  #         path: target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-rust-${{ matrix.target }}${{ matrix.extension }}

  build-cpp:
    if: contains(github.ref_name, 'minimal')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          # macOS
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-26
            target: arm64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract project name (same as Rust crate name)
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = \"\(.*\)\"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Build C++ project
        working-directory: cppsrc
        run: |
          make ${{ env.PROJECT_NAME }}
          if [[ "${{ matrix.os }}" == "macos"* ]]; then
            strip -x ${{ env.PROJECT_NAME }}
          else
            strip ${{ env.PROJECT_NAME }}
          fi
      
      - name: Verify binary architecture
        working-directory: cppsrc
        shell: bash
        run: |
          BINARY="${{ env.PROJECT_NAME }}"
          FILE_BINARY=$(file "$BINARY")
          echo "Binary file info: $FILE_BINARY"

          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu|x86_64-apple-darwin)
              echo "$FILE_BINARY" | grep -q 'x86-64\|x86_64' || { echo "Architecture mismatch!"; exit 1; }
              ;;
            aarch64-unknown-linux-gnu|arm64-apple-darwin)
              echo "$FILE_BINARY" | grep -q 'aarch64\|arm64' || { echo "Architecture mismatch!"; exit 1; }
              ;;
            *)
              echo "Unknown architecture ${matrix.target}"
              exit 1
              ;;
          esac

      - name: Rename C++ artifact
        run: |
          cp cppsrc/${{ env.PROJECT_NAME }} \
             cppsrc/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ matrix.target }}${{ matrix.extension }}

      - name: Upload C++ artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{matrix.os}}-${{ matrix.target }}-cpp
          path: cppsrc/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ matrix.target }}${{ matrix.extension }}

  release:
    # needs: [build-rust, build-cpp]
    needs: [build-cpp]
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Set release name
        run: |
          TAG="${{ github.ref_name }}"
          if [[ "$TAG" == "minimal" ]]; then
            echo "RELEASE_NAME=Minimal Release" >> $GITHUB_ENV
          else
            echo "RELEASE_NAME=Release $TAG" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          body: |
            This release contains minimal version of ncp: no external dependencies, smallest possible binary.
            Suitable for trusted network environments, such as internal network or VPN.
            For more information, see [specs_minimal.md](specs/specs_minimal.md)
          generate_release_notes: false
          name: ${{ env.RELEASE_NAME }}
          files: artifacts/**

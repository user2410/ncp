name: Release versioned binaries

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-c:
    if: contains(github.ref_name, '-minimal')
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (using musl)
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            container: alpine:latest
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
          # macOS (no container needed)
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-26
            target: arm64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract project name (same as Rust crate name)
        run: echo "PROJECT_NAME=$(sed -n 's/^name = \"\(.*\)\"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            apk add --no-cache build-base make linux-headers
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools make gcc
          fi

      - name: Build C project
        working-directory: csrc
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            make CC=gcc CFLAGS="-std=c17 -Wall -Wextra -Os -static -ffunction-sections -fdata-sections -Wl,--gc-sections" ${{ env.PROJECT_NAME }}
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            make CC=musl-gcc CFLAGS="-std=c17 -Wall -Wextra -Os -static -ffunction-sections -fdata-sections -Wl,--gc-sections" ${{ env.PROJECT_NAME }}
          else
            make CC=clang CFLAGS="-std=c17 -Wall -Wextra -Os" ${{ env.PROJECT_NAME }}
          fi
          
          if [[ "${{ matrix.os }}" == "macos"* ]]; then
            strip -x ${{ env.PROJECT_NAME }}
          else
            strip ${{ env.PROJECT_NAME }}
          fi
      
      - name: Verify binary architecture and linking
        working-directory: csrc
        run: |
          BINARY="${{ env.PROJECT_NAME }}"
          FILE_BINARY=$(file "$BINARY")
          echo "Binary file info: $FILE_BINARY"

          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl)
              echo "$FILE_BINARY" | grep -q 'x86-64\|x86_64' || { echo "Architecture mismatch!"; exit 1; }
              echo "$FILE_BINARY" | grep -q 'statically linked' || { echo "Not statically linked!"; exit 1; }
              ;;
            aarch64-unknown-linux-musl)
              echo "$FILE_BINARY" | grep -q 'ARM\|aarch64\|arm64' || { echo "Architecture mismatch!"; exit 1; }
              echo "$FILE_BINARY" | grep -q 'statically linked' || { echo "Not statically linked!"; exit 1; }
              ;;
            x86_64-apple-darwin)
              echo "$FILE_BINARY" | grep -q 'x86-64\|x86_64' || { echo "Architecture mismatch!"; exit 1; }
              ;;
            arm64-apple-darwin)
              echo "$FILE_BINARY" | grep -q 'ARM\|aarch64\|arm64' || { echo "Architecture mismatch!"; exit 1; }
              ;;
            *)
              echo "Unknown architecture ${matrix.target}"
              exit 1
              ;;
          esac

      - name: Rename C artifact
        run: |
          cp csrc/${{ env.PROJECT_NAME }} \
             csrc/${{ env.PROJECT_NAME }}-${{ matrix.target }}

      - name: Upload C artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}
          path: csrc/${{ env.PROJECT_NAME }}-${{ matrix.target }}

  release:
    # needs: [build-rust, build-c]
    needs: [build-c]
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Set release name
        run: |
          echo "RELEASE_NAME=Release ${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          body: |
            This release contains minimal version of ncp: no external dependencies, smallest possible binary.
            Suitable for trusted network environments, such as internal network or VPN.
            For more information, see [specs_minimal.md](specs/specs_minimal.md)
          generate_release_notes: false
          name: ${{ env.RELEASE_NAME }}
          files: artifacts/**

      - name: Create Latest GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          body: |
            This release contains minimal version of ncp: no external dependencies, smallest possible binary.
            Suitable for trusted network environments, such as internal network or VPN.
            For more information, see [specs_minimal.md](specs/specs_minimal.md)
          generate_release_notes: false
          name: ${{ env.RELEASE_NAME }}
          files: artifacts/**
          overwrite_files: true
